const qrcode = require('qrcode-terminal');
const { google } = require('googleapis');
const { Client } = require('whatsapp-web.js');
const credentials = require('./credentials.json');

const client = new Client();
const sessions = new Map();
const delay = ms => new Promise(res => setTimeout(res, ms));

const cidades = {
  '1': 'Lagoa do Ouro',
  '2': 'Caruaru',
  '3': 'Garanhuns',
  '4': 'Correntes'
};

const horariosPadrao = {
  '1': '08:00',
  '2': '09:00',
  '3': '10:00',
  '4': '14:00',
  '5': '15:00'
};

const spreadsheetId = '1lJ2Hd3pk10HvvaWin3R_Tn1ztEHfNtYvp_7D5w7mji0';
const sheets = google.sheets('v4');
const calendar = google.calendar('v3');
const auth = new google.auth.GoogleAuth({
  credentials,
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/calendar'
  ]
});

client.on('qr', qr => qrcode.generate(qr, { small: true }));
client.on('ready', () => console.log('‚úÖ WhatsApp conectado.'));
client.initialize();

client.on('message', async msg => {
  if (!msg.from.endsWith('@c.us')) return;
  const id = msg.from;
  const text = msg.body.trim();
  const session = getSession(id);

  switch (session.stage) {
    case 'MENU':
      if (/^(menu|oi|ol[√°a]|bom dia|boa tarde|boa noite)$/i.test(text)) {
        const contact = await msg.getContact();
        session.telefone = msg.from;

        if (contact.pushname) {
          session.nome = contact.pushname.split(' ')[0];
          await client.sendMessage(id, `Ol√°, ${session.nome}! üëã\nComo podemos ajudar?\n1‚É£ Ver pre√ßos\n2‚É£ Agendar exame`);
        } else {
          session.stage = 'NOME';
          await client.sendMessage(id, 'Ol√°! üòä Qual √© o seu *primeiro nome*?');
        }
      } else if (text === '1') {
        await client.sendMessage(id, getResumo());
      } else if (text === '2') {
        session.stage = 'EXAME';
        await client.sendMessage(id, 'Digite o exame que deseja realizar:');
      } else {
        await client.sendMessage(id, 'Digite *menu* para come√ßar.');
      }
      break;

    case 'NOME':
      session.nome = text.split(' ')[0];
      await client.sendMessage(id, `Obrigado, ${session.nome}! üëã\nComo podemos ajudar?\n1‚É£ Ver pre√ßos\n2‚É£ Agendar exame`);
      session.stage = 'MENU';
      break;

    case 'EXAME':
      session.exames = text;
      session.stage = 'CIDADE';
      await client.sendMessage(id, 'Em qual cidade deseja fazer o exame?\n1‚É£ Lagoa do Ouro\n2‚É£ Caruaru\n3‚É£ Garanhuns\n4‚É£ Correntes');
      break;

    case 'CIDADE':
      if (!cidades[text]) return client.sendMessage(id, 'Op√ß√£o inv√°lida. Tente novamente.');
      session.cidade = cidades[text];
      if (text === '2') {
        session.stage = 'CLINICA';
        return client.sendMessage(id, `üìç *Cl√≠nicas em Caruaru:*\n1‚É£ Cl√≠nica Aulas\n2‚É£ Cl√≠nica Maur√≠cio Polito\n3‚É£ Cl√≠nica Obgyn\n\nDigite o n√∫mero da cl√≠nica desejada:`);
      } else {
        session.stage = 'DATA';
        return client.sendMessage(id, 'Digite a data desejada (ex: 20/08):');
      }

    case 'CLINICA':
      const clinicas = {
        '1': 'Cl√≠nica Aulas',
        '2': 'Cl√≠nica Maur√≠cio Polito',
        '3': 'Cl√≠nica Obgyn'
      };
      if (!clinicas[text]) return client.sendMessage(id, 'Op√ß√£o inv√°lida. Tente novamente.');
      session.clinica = clinicas[text];
      session.stage = 'DATA';
      return client.sendMessage(id, 'Digite a data desejada (ex: 15/08):');

    case 'DATA':
      session.data = text;
      session.dataFormatada = formatarDataParaISO(text);
      session.stage = 'HORARIO';
      if (session.cidade === 'Caruaru') {
        await client.sendMessage(id, getHorariosCaruaru(session.clinica));
      } else {
        await client.sendMessage(id, 'Escolha o hor√°rio:\n1‚É£ 08:00\n2‚É£ 09:00\n3‚É£ 10:00\n4‚É£ 14:00\n5‚É£ 15:00');
      }
      break;

    case 'HORARIO':
      session.horario = horariosPadrao[text] || text;
      session.stage = 'CONFIRMA';
      await client.sendMessage(id,
        `‚ö†Ô∏è Confirme os dados:\nüìå Exame: ${session.exames}\nüìå Cidade: ${session.cidade}\n${session.clinica ? `üìå Cl√≠nica: ${session.clinica}\n` : ''}üìå Data: ${session.data}\nüìå Hor√°rio: ${session.horario}\n\n1‚É£ Confirmar\n2‚É£ Cancelar`);
      break;

    case 'CONFIRMA':
      if (text === '1') {
        try {
          await salvarNoGoogleSheets(session);
          await criarEventoGoogleAgenda(session);
          await client.sendMessage(id, '‚úÖ Agendamento confirmado com sucesso!');
        } catch (err) {
          console.error(err);
          await client.sendMessage(id, '‚ùå Erro ao salvar. Tente novamente mais tarde.');
        }
      } else {
        await client.sendMessage(id, 'Agendamento cancelado. Digite *menu* para voltar.');
      }
      session.stage = 'MENU';
      break;
  }
});

function getSession(id) {
  if (!sessions.has(id)) sessions.set(id, { stage: 'MENU' });
  return sessions.get(id);
}

function getResumo() {
  return `üë©‚Äç‚öïÔ∏è *Dra. Mariella Ribeiro ‚Äì Ultrassonografia*\n\nüí≤ *Pre√ßos*:\n- USG abdominal: R$120\n- USG transvaginal com Doppler: R$200\n- USG transvaginal sem Doppler: R$140\n- USG obst√©trica inicial: R$120\n- USG obst√©trica fora de janela: R$150`;
}

function getHorariosCaruaru(clinica) {
  const horarios = {
    'Cl√≠nica Aulas': `*Hor√°rios Cl√≠nica Aulas (07‚Äì23/08)*:\n- 10:00 - 10:45\n- 11:00 - 11:45\n- 14:00 - 14:45\n- 15:00 - 15:45`,
    'Cl√≠nica Maur√≠cio Polito': `*Hor√°rios Cl√≠nica Maur√≠cio Polito (08‚Äì24/08)*:\n- 08:00 - 08:45\n- 09:00 - 09:45\n- 10:00 - 10:45\n- 11:00 - 11:45\n- 14:00 - 14:45\n- 15:00 - 15:45\n- 17:00 - 17:45`,
    'Cl√≠nica Obgyn': `*Hor√°rios Cl√≠nica Obgyn (07‚Äì23/08)*:\n- 14:00 - 14:45\n- 15:00 - 15:45\n- 16:00 - 16:45\n- 17:00 - 17:45\n- 18:00 - 18:45`
  };
  return horarios[clinica] || 'Hor√°rios indispon√≠veis.';
}

function formatarDataParaISO(dataStr) {
  const [dia, mes] = dataStr.split('/').map(Number);
  const ano = new Date().getFullYear();
  return `${ano}-${String(mes).padStart(2, '0')}-${String(dia).padStart(2, '0')}`;
}

async function salvarNoGoogleSheets(s) {
  const authClient = await auth.getClient();
  await sheets.spreadsheets.values.append({
    auth: authClient,
    spreadsheetId,
    range: 'A1',
    valueInputOption: 'USER_ENTERED',
    requestBody: {
      values: [[s.nome, s.telefone, s.exames, s.cidade, s.clinica || '', s.data, s.horario]]
    }
  });
}

async function criarEventoGoogleAgenda(s) {
  const authClient = await auth.getClient();
  const dataHoraInicio = new Date(`${s.dataFormatada}T${s.horario}:00-03:00`);
  const dataHoraFim = new Date(dataHoraInicio.getTime() + 30 * 60000);

  const evento = {
    summary: `Consulta de ${s.nome}`,
    location: s.cidade,
    description: `Exame(s): ${s.exames}\nTelefone: ${s.telefone}`,
    start: {
      dateTime: dataHoraInicio.toISOString(),
      timeZone: 'America/Recife',
    },
    end: {
      dateTime: dataHoraFim.toISOString(),
      timeZone: 'America/Recife',
    },
  };

  await calendar.events.insert({
    auth: authClient,
    calendarId: 'primary',
    resource: evento,
  });
}
